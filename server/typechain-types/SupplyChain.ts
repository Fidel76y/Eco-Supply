/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace SupplyChain {
  export type ParticipantStruct = {
    id: AddressLike;
    role: BigNumberish;
    name: string;
    location: string;
    verificationStatus: BigNumberish;
  };

  export type ParticipantStructOutput = [
    id: string,
    role: bigint,
    name: string,
    location: string,
    verificationStatus: bigint
  ] & {
    id: string;
    role: bigint;
    name: string;
    location: string;
    verificationStatus: bigint;
  };

  export type ItemStruct = {
    name: string;
    description: string;
    state: BigNumberish;
    manufacturer: SupplyChain.ParticipantStruct;
    distributor: SupplyChain.ParticipantStruct;
    retailer: SupplyChain.ParticipantStruct;
    manufacturedTimestamp: BigNumberish;
    shippedToDistributorTimestamp: BigNumberish;
    shippedToRetailerTimestamp: BigNumberish;
    soldTimestamp: BigNumberish;
    id: BigNumberish;
  };

  export type ItemStructOutput = [
    name: string,
    description: string,
    state: bigint,
    manufacturer: SupplyChain.ParticipantStructOutput,
    distributor: SupplyChain.ParticipantStructOutput,
    retailer: SupplyChain.ParticipantStructOutput,
    manufacturedTimestamp: bigint,
    shippedToDistributorTimestamp: bigint,
    shippedToRetailerTimestamp: bigint,
    soldTimestamp: bigint,
    id: bigint
  ] & {
    name: string;
    description: string;
    state: bigint;
    manufacturer: SupplyChain.ParticipantStructOutput;
    distributor: SupplyChain.ParticipantStructOutput;
    retailer: SupplyChain.ParticipantStructOutput;
    manufacturedTimestamp: bigint;
    shippedToDistributorTimestamp: bigint;
    shippedToRetailerTimestamp: bigint;
    soldTimestamp: bigint;
    id: bigint;
  };
}

export interface SupplyChainInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "approveVerification"
      | "getDistributorItems"
      | "getItemDetails"
      | "getManufacturerItems"
      | "getParticipantsWithPendingVerification"
      | "getRetailerItems"
      | "itemCount"
      | "items"
      | "manufactureItem"
      | "owner"
      | "participantKeys"
      | "participants"
      | "registerUser"
      | "rejectVerification"
      | "requestVerification"
      | "sellItem"
      | "shipItemToDistributor"
      | "shipItemToRetailer"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ItemManufactured"
      | "ItemShippedToDistributor"
      | "ItemShippedToRetailer"
      | "ItemSold"
      | "VerificationApproved"
      | "VerificationRejected"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "approveVerification",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getDistributorItems",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getItemDetails",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getManufacturerItems",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getParticipantsWithPendingVerification",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRetailerItems",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "itemCount", values?: undefined): string;
  encodeFunctionData(functionFragment: "items", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "manufactureItem",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "participantKeys",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "participants",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "registerUser",
    values: [BigNumberish, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "rejectVerification",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "requestVerification",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sellItem",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "shipItemToDistributor",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "shipItemToRetailer",
    values: [BigNumberish, AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "approveVerification",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDistributorItems",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getItemDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getManufacturerItems",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getParticipantsWithPendingVerification",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRetailerItems",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "itemCount", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "items", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "manufactureItem",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "participantKeys",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "participants",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerUser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rejectVerification",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestVerification",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sellItem", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "shipItemToDistributor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "shipItemToRetailer",
    data: BytesLike
  ): Result;
}

export namespace ItemManufacturedEvent {
  export type InputTuple = [_itemId: BigNumberish];
  export type OutputTuple = [_itemId: bigint];
  export interface OutputObject {
    _itemId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ItemShippedToDistributorEvent {
  export type InputTuple = [_itemId: BigNumberish];
  export type OutputTuple = [_itemId: bigint];
  export interface OutputObject {
    _itemId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ItemShippedToRetailerEvent {
  export type InputTuple = [_itemId: BigNumberish];
  export type OutputTuple = [_itemId: bigint];
  export interface OutputObject {
    _itemId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ItemSoldEvent {
  export type InputTuple = [_itemId: BigNumberish];
  export type OutputTuple = [_itemId: bigint];
  export interface OutputObject {
    _itemId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VerificationApprovedEvent {
  export type InputTuple = [_user: AddressLike];
  export type OutputTuple = [_user: string];
  export interface OutputObject {
    _user: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VerificationRejectedEvent {
  export type InputTuple = [_user: AddressLike];
  export type OutputTuple = [_user: string];
  export interface OutputObject {
    _user: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface SupplyChain extends BaseContract {
  connect(runner?: ContractRunner | null): SupplyChain;
  waitForDeployment(): Promise<this>;

  interface: SupplyChainInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  approveVerification: TypedContractMethod<
    [_user: AddressLike],
    [void],
    "nonpayable"
  >;

  getDistributorItems: TypedContractMethod<
    [_distributorAddress: AddressLike],
    [SupplyChain.ItemStructOutput[]],
    "view"
  >;

  getItemDetails: TypedContractMethod<
    [_itemId: BigNumberish],
    [SupplyChain.ItemStructOutput],
    "view"
  >;

  getManufacturerItems: TypedContractMethod<
    [_manufacturerAddress: AddressLike],
    [SupplyChain.ItemStructOutput[]],
    "view"
  >;

  getParticipantsWithPendingVerification: TypedContractMethod<
    [],
    [SupplyChain.ParticipantStructOutput[]],
    "view"
  >;

  getRetailerItems: TypedContractMethod<
    [_retailerAddress: AddressLike],
    [SupplyChain.ItemStructOutput[]],
    "view"
  >;

  itemCount: TypedContractMethod<[], [bigint], "view">;

  items: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        string,
        string,
        bigint,
        SupplyChain.ParticipantStructOutput,
        SupplyChain.ParticipantStructOutput,
        SupplyChain.ParticipantStructOutput,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint
      ] & {
        name: string;
        description: string;
        state: bigint;
        manufacturer: SupplyChain.ParticipantStructOutput;
        distributor: SupplyChain.ParticipantStructOutput;
        retailer: SupplyChain.ParticipantStructOutput;
        manufacturedTimestamp: bigint;
        shippedToDistributorTimestamp: bigint;
        shippedToRetailerTimestamp: bigint;
        soldTimestamp: bigint;
        id: bigint;
      }
    ],
    "view"
  >;

  manufactureItem: TypedContractMethod<
    [_itemName: string, _itemDescription: string],
    [void],
    "nonpayable"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  participantKeys: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  participants: TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, bigint, string, string, bigint] & {
        id: string;
        role: bigint;
        name: string;
        location: string;
        verificationStatus: bigint;
      }
    ],
    "view"
  >;

  registerUser: TypedContractMethod<
    [_role: BigNumberish, _name: string, _location: string],
    [void],
    "nonpayable"
  >;

  rejectVerification: TypedContractMethod<
    [_user: AddressLike],
    [void],
    "nonpayable"
  >;

  requestVerification: TypedContractMethod<[], [void], "nonpayable">;

  sellItem: TypedContractMethod<[_itemId: BigNumberish], [void], "nonpayable">;

  shipItemToDistributor: TypedContractMethod<
    [_itemId: BigNumberish, _distributorAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  shipItemToRetailer: TypedContractMethod<
    [_itemId: BigNumberish, _retailerAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "approveVerification"
  ): TypedContractMethod<[_user: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getDistributorItems"
  ): TypedContractMethod<
    [_distributorAddress: AddressLike],
    [SupplyChain.ItemStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getItemDetails"
  ): TypedContractMethod<
    [_itemId: BigNumberish],
    [SupplyChain.ItemStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getManufacturerItems"
  ): TypedContractMethod<
    [_manufacturerAddress: AddressLike],
    [SupplyChain.ItemStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getParticipantsWithPendingVerification"
  ): TypedContractMethod<[], [SupplyChain.ParticipantStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "getRetailerItems"
  ): TypedContractMethod<
    [_retailerAddress: AddressLike],
    [SupplyChain.ItemStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "itemCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "items"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        string,
        string,
        bigint,
        SupplyChain.ParticipantStructOutput,
        SupplyChain.ParticipantStructOutput,
        SupplyChain.ParticipantStructOutput,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint
      ] & {
        name: string;
        description: string;
        state: bigint;
        manufacturer: SupplyChain.ParticipantStructOutput;
        distributor: SupplyChain.ParticipantStructOutput;
        retailer: SupplyChain.ParticipantStructOutput;
        manufacturedTimestamp: bigint;
        shippedToDistributorTimestamp: bigint;
        shippedToRetailerTimestamp: bigint;
        soldTimestamp: bigint;
        id: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "manufactureItem"
  ): TypedContractMethod<
    [_itemName: string, _itemDescription: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "participantKeys"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "participants"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, bigint, string, string, bigint] & {
        id: string;
        role: bigint;
        name: string;
        location: string;
        verificationStatus: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "registerUser"
  ): TypedContractMethod<
    [_role: BigNumberish, _name: string, _location: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "rejectVerification"
  ): TypedContractMethod<[_user: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "requestVerification"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "sellItem"
  ): TypedContractMethod<[_itemId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "shipItemToDistributor"
  ): TypedContractMethod<
    [_itemId: BigNumberish, _distributorAddress: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "shipItemToRetailer"
  ): TypedContractMethod<
    [_itemId: BigNumberish, _retailerAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "ItemManufactured"
  ): TypedContractEvent<
    ItemManufacturedEvent.InputTuple,
    ItemManufacturedEvent.OutputTuple,
    ItemManufacturedEvent.OutputObject
  >;
  getEvent(
    key: "ItemShippedToDistributor"
  ): TypedContractEvent<
    ItemShippedToDistributorEvent.InputTuple,
    ItemShippedToDistributorEvent.OutputTuple,
    ItemShippedToDistributorEvent.OutputObject
  >;
  getEvent(
    key: "ItemShippedToRetailer"
  ): TypedContractEvent<
    ItemShippedToRetailerEvent.InputTuple,
    ItemShippedToRetailerEvent.OutputTuple,
    ItemShippedToRetailerEvent.OutputObject
  >;
  getEvent(
    key: "ItemSold"
  ): TypedContractEvent<
    ItemSoldEvent.InputTuple,
    ItemSoldEvent.OutputTuple,
    ItemSoldEvent.OutputObject
  >;
  getEvent(
    key: "VerificationApproved"
  ): TypedContractEvent<
    VerificationApprovedEvent.InputTuple,
    VerificationApprovedEvent.OutputTuple,
    VerificationApprovedEvent.OutputObject
  >;
  getEvent(
    key: "VerificationRejected"
  ): TypedContractEvent<
    VerificationRejectedEvent.InputTuple,
    VerificationRejectedEvent.OutputTuple,
    VerificationRejectedEvent.OutputObject
  >;

  filters: {
    "ItemManufactured(uint256)": TypedContractEvent<
      ItemManufacturedEvent.InputTuple,
      ItemManufacturedEvent.OutputTuple,
      ItemManufacturedEvent.OutputObject
    >;
    ItemManufactured: TypedContractEvent<
      ItemManufacturedEvent.InputTuple,
      ItemManufacturedEvent.OutputTuple,
      ItemManufacturedEvent.OutputObject
    >;

    "ItemShippedToDistributor(uint256)": TypedContractEvent<
      ItemShippedToDistributorEvent.InputTuple,
      ItemShippedToDistributorEvent.OutputTuple,
      ItemShippedToDistributorEvent.OutputObject
    >;
    ItemShippedToDistributor: TypedContractEvent<
      ItemShippedToDistributorEvent.InputTuple,
      ItemShippedToDistributorEvent.OutputTuple,
      ItemShippedToDistributorEvent.OutputObject
    >;

    "ItemShippedToRetailer(uint256)": TypedContractEvent<
      ItemShippedToRetailerEvent.InputTuple,
      ItemShippedToRetailerEvent.OutputTuple,
      ItemShippedToRetailerEvent.OutputObject
    >;
    ItemShippedToRetailer: TypedContractEvent<
      ItemShippedToRetailerEvent.InputTuple,
      ItemShippedToRetailerEvent.OutputTuple,
      ItemShippedToRetailerEvent.OutputObject
    >;

    "ItemSold(uint256)": TypedContractEvent<
      ItemSoldEvent.InputTuple,
      ItemSoldEvent.OutputTuple,
      ItemSoldEvent.OutputObject
    >;
    ItemSold: TypedContractEvent<
      ItemSoldEvent.InputTuple,
      ItemSoldEvent.OutputTuple,
      ItemSoldEvent.OutputObject
    >;

    "VerificationApproved(address)": TypedContractEvent<
      VerificationApprovedEvent.InputTuple,
      VerificationApprovedEvent.OutputTuple,
      VerificationApprovedEvent.OutputObject
    >;
    VerificationApproved: TypedContractEvent<
      VerificationApprovedEvent.InputTuple,
      VerificationApprovedEvent.OutputTuple,
      VerificationApprovedEvent.OutputObject
    >;

    "VerificationRejected(address)": TypedContractEvent<
      VerificationRejectedEvent.InputTuple,
      VerificationRejectedEvent.OutputTuple,
      VerificationRejectedEvent.OutputObject
    >;
    VerificationRejected: TypedContractEvent<
      VerificationRejectedEvent.InputTuple,
      VerificationRejectedEvent.OutputTuple,
      VerificationRejectedEvent.OutputObject
    >;
  };
}
